---
import "../styles/global.css";
import Logo from "../components/logo.astro";
---

<header
  id="header"
  class="py-3 px-9 flex justify-between items-center fixed top-0 w-screen z-40"
  style="transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);"
>
  <Logo />
  <nav class="flex flex-grow justify-centerv basis-0">
    <ul
      class="font-medium flex text-sm [&>li>a]: text-current [&>li>a]:inline-block [&>li>a]:py-2 [&>li>a]:px-4"
    >
      <li><a href="#">Inicio</a></li>
      <li><a href="#">Servicios</a></li>
      <li><a href="#">Experiencia</a></li>
      <li><a href="#">Blog</a></li>
      <li><a href="#">Clientes</a></li>
      <li><a href="#">Nosotros</a></li>
    </ul>
  </nav>
  <nav class="flex flex-grow justify-end basis-0">
    <ul
      class="font-medium flex text-sm [&>li>a]: text-current [&>li>a]:inline-block [&>li>a]:py-2 [&>li>a]:px-4"
    >
      <li><a href="#">Contacto</a></li>
    </ul>
  </nav>
</header>

<script>
  const header = document.querySelector("#header") as HTMLElement
  const observerOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.9,
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const { isIntersecting } = entry
      if (isIntersecting) {
        const color = entry.target.getAttribute("data-header-color")
        header.style.color = color ?? ""
        
        // Add white background and shadow for sections with SVG background
        if (color === "black") {
          header.style.backgroundColor = "rgba(255, 255, 255, 0.95)"
          header.style.backdropFilter = "blur(10px)"
          header.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)"
        } else {
          // Smooth transition back to transparent for hero section
          header.style.backgroundColor = "rgba(255, 255, 255, 0)"
          header.style.backdropFilter = "blur(0px)"
          header.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0)"
        }
      }
    })
  }, observerOptions)

  const sections = document.querySelectorAll(".section")
  sections.forEach((section) => observer.observe(section))
</script>
